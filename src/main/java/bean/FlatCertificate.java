package bean;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FlatCertificate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static FlatCertificate getRootAsFlatCertificate(ByteBuffer _bb) { return getRootAsFlatCertificate(_bb, new FlatCertificate()); }
  public static FlatCertificate getRootAsFlatCertificate(ByteBuffer _bb, FlatCertificate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FlatCertificate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String version() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer versionAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer versionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int serialNumber() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String signatureValue() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer signatureValueAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer signatureValueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String issuer() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer issuerAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer issuerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public long validNotAfter() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String holder() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer holderAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer holderInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public String publicKey() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer publicKeyAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer publicKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public int historyHeight() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int opType() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String contractUrl() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer contractUrlAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer contractUrlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }

  public static int createFlatCertificate(FlatBufferBuilder builder,
      int versionOffset,
      int serialNumber,
      int signatureValueOffset,
      int issuerOffset,
      long validNotAfter,
      int holderOffset,
      int publicKeyOffset,
      int historyHeight,
      int opType,
      int contractUrlOffset) {
    builder.startTable(10);
    FlatCertificate.addValidNotAfter(builder, validNotAfter);
    FlatCertificate.addContractUrl(builder, contractUrlOffset);
    FlatCertificate.addOpType(builder, opType);
    FlatCertificate.addHistoryHeight(builder, historyHeight);
    FlatCertificate.addPublicKey(builder, publicKeyOffset);
    FlatCertificate.addHolder(builder, holderOffset);
    FlatCertificate.addIssuer(builder, issuerOffset);
    FlatCertificate.addSignatureValue(builder, signatureValueOffset);
    FlatCertificate.addSerialNumber(builder, serialNumber);
    FlatCertificate.addVersion(builder, versionOffset);
    return FlatCertificate.endFlatCertificate(builder);
  }

  public static void startFlatCertificate(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addVersion(FlatBufferBuilder builder, int versionOffset) { builder.addOffset(0, versionOffset, 0); }
  public static void addSerialNumber(FlatBufferBuilder builder, int serialNumber) { builder.addInt(1, serialNumber, 0); }
  public static void addSignatureValue(FlatBufferBuilder builder, int signatureValueOffset) { builder.addOffset(2, signatureValueOffset, 0); }
  public static void addIssuer(FlatBufferBuilder builder, int issuerOffset) { builder.addOffset(3, issuerOffset, 0); }
  public static void addValidNotAfter(FlatBufferBuilder builder, long validNotAfter) { builder.addLong(4, validNotAfter, 0L); }
  public static void addHolder(FlatBufferBuilder builder, int holderOffset) { builder.addOffset(5, holderOffset, 0); }
  public static void addPublicKey(FlatBufferBuilder builder, int publicKeyOffset) { builder.addOffset(6, publicKeyOffset, 0); }
  public static void addHistoryHeight(FlatBufferBuilder builder, int historyHeight) { builder.addInt(7, historyHeight, 0); }
  public static void addOpType(FlatBufferBuilder builder, int opType) { builder.addInt(8, opType, 0); }
  public static void addContractUrl(FlatBufferBuilder builder, int contractUrlOffset) { builder.addOffset(9, contractUrlOffset, 0); }
  public static int endFlatCertificate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FlatCertificate get(int j) { return get(new FlatCertificate(), j); }
    public FlatCertificate get(FlatCertificate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

